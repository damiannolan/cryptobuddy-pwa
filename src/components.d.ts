/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import {
  MatchResults,
} from '@stencil/router';

declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  AppHeader as AppHeader
} from './components/app-header/app-header';

declare global {
  interface HTMLAppHeaderElement extends AppHeader, HTMLStencilElement {
  }
  var HTMLAppHeaderElement: {
    prototype: HTMLAppHeaderElement;
    new (): HTMLAppHeaderElement;
  };
  interface HTMLElementTagNameMap {
    "app-header": HTMLAppHeaderElement;
  }
  interface ElementTagNameMap {
    "app-header": HTMLAppHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-header": JSXElements.AppHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHeaderAttributes extends HTMLAttributes {
      title?: string;
    }
  }
}


import {
  AppHome as AppHome
} from './components/app-home/app-home';

declare global {
  interface HTMLAppHomeElement extends AppHome, HTMLStencilElement {
  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-home": JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppProfile as AppProfile
} from './components/app-profile/app-profile';

declare global {
  interface HTMLAppProfileElement extends AppProfile, HTMLStencilElement {
  }
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-profile": JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      match?: MatchResults;
    }
  }
}


import {
  CryptobuddyApp as CryptobuddyApp
} from './components/cryptobuddy-app/cryptobuddy-app';

declare global {
  interface HTMLCryptobuddyAppElement extends CryptobuddyApp, HTMLStencilElement {
  }
  var HTMLCryptobuddyAppElement: {
    prototype: HTMLCryptobuddyAppElement;
    new (): HTMLCryptobuddyAppElement;
  };
  interface HTMLElementTagNameMap {
    "cryptobuddy-app": HTMLCryptobuddyAppElement;
  }
  interface ElementTagNameMap {
    "cryptobuddy-app": HTMLCryptobuddyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "cryptobuddy-app": JSXElements.CryptobuddyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface CryptobuddyAppAttributes extends HTMLAttributes {
      activeMenuTitle?: string;
    }
  }
}


import {
  LazyImg as LazyImg
} from './components/lazy-img/lazy-img';

declare global {
  interface HTMLLazyImgElement extends LazyImg, HTMLStencilElement {
  }
  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };
  interface HTMLElementTagNameMap {
    "lazy-img": HTMLLazyImgElement;
  }
  interface ElementTagNameMap {
    "lazy-img": HTMLLazyImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "lazy-img": JSXElements.LazyImgAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyImgAttributes extends HTMLAttributes {
      alt?: string;
      src?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
